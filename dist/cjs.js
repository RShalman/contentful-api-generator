var W=Object.create;var O=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,Y=Object.prototype.hasOwnProperty;var Q=(e,t)=>{for(var r in t)O(e,r,{get:t[r],enumerable:!0})},P=(e,t,r,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let c of H(t))!Y.call(e,c)&&c!==r&&O(e,c,{get:()=>t[c],enumerable:!(i=q(t,c))||i.enumerable});return e};var m=(e,t,r)=>(r=e!=null?W(V(e)):{},P(t||!e||!e.__esModule?O(r,"default",{value:e,enumerable:!0}):r,e)),X=e=>P(O({},"__esModule",{value:!0}),e);var fe={};Q(fe,{default:()=>U});module.exports=X(fe);var b=m(require("contentful-export"),1);async function j(e){await(0,b.default)(e)}var C=m(require("fs"),1),I=m(require("prettier"),1);function G(e){return e&&e[0].toUpperCase()+e.slice(1)}function S(e){return Array.isArray(e)}function Z(e){typeof e=="object"&&S(e)}function J(e){return S(e)||Z(e)}var $=m(require("fs"),1);var L="/api/contentful",ee=`${L}/data/contentful-export.json`,te=`${L}/contentEntries.json`,A=(e,t)=>e.find(r=>r.sys.id===t)??null;function w(){let{entries:e,assets:t}=JSON.parse($.readFileSync(__dirname+ee).toString())??{},r=JSON.parse($.readFileSync(__dirname+L+"/locales.json").toString()),i=t?JSON.parse(JSON.stringify(t).replaceAll(/\/\/images/gi,"images")):null,c=[...e,...i],y=o=>A(c,o),p=(o,n)=>{let s=y(o);if(!s)return null;let l=Object.keys(s.fields);return{...s,fields:l.reduce((a,T)=>{let d=s.fields[T];return{...a,[T]:!d[n].sys&&!S(d[n])?d:S(d[n])?d[n].map(u=>u.sys?p(u.sys.id,n)?.fields:u):d[n].sys?p(d[n].sys.id,n).fields:d[n]}},{})}},f=(o,n=!1,s)=>{let l=o;if(J(o)){if(S(o))l=o.map(a=>{let{sys:T}=a,d=T?p(T.id,s):a;return d?n&&T?d.fields:d:null}).filter(Boolean);else if(o.sys){let a=p(o.sys.id,s);a?l=n?a.fields:a:l=null}}return l};if(c){let o=c.map(({fields:n,...s})=>{let l=Object.keys(n).reduce((a,T)=>({...a,[T]:r.reduce((d,{code:u})=>{let z=n[T][u];return{...d,[u]:f(z,!0,u)}},{})}),{});return{...s,fields:l}});$.writeFileSync(__dirname+te,JSON.stringify(o,null,2))}}var E="/api/contentful",ne=`${E}/data/contentful-export.json`,R=`${E}/contentTypes.json`,se=`${E}/locales.json`,oe=`${E}/locales.ts`,re=`${E}/contentTypes.ts`,N=e=>{throw new Error(`Seems like file is empty or doesnt exist: ${e}`)};function k(e,t,r){let i=r.arrayTypeItems?r?.arrayTypeItems?.reduce((y,p,f,o)=>y+(p==="string"?p:`CContentTypes<L>['${p}']${f!==o.length-1?" | ":""}
`),""):!1,c=r.validationTypes?r?.validationTypes?.reduce((y,p,f,o)=>y+(p==="string"?p:`CContentTypes<L>['${p}']${f!==o.length-1?" | ":""}
`),""):!1;return{Array:i?`Array<${i}>`:t,Link:r.linkType==="Entry"?c||`CT${G(e)}<L>`:`${r.linkType}<L>`,Integer:"number"}[t]??t}function ie(e,t){return`
      export type CT${e.split(" ").join("")}<L extends CTLocales> = {
        ${Object.keys(t).reduce((r,i)=>{let c=t[i],y=c.linkType==="Asset"?k(i,c.type,c):`Record<L, ${k(i,c.type,c)}>`;return r+`${i}${c.required?"":"?"}: ${y};`},"")}
          }

          

          `}function ce(e){return`
      export type CContentTypesKeys = keyof CContentTypes<CTLocales>

      export type CContentTypes<L extends CTLocales> = {${e.reduce((t,r)=>t+`${r.contentTypeId}: CT${r.name.split(" ").join("")}<L>;`,"")}}
      
      

    `}function B(){let e=JSON.parse(C.readFileSync(__dirname+ne).toString()),{contentTypes:t,locales:r}=e??{};if(r){let i=r.map(({name:y,code:p})=>({name:y,code:p})),c=`export type CTLocales = ${i.reduce((y,p,f)=>y+(f===0?`'${p.code}'`:` | '${p.code}'`),"")}`;C.writeFileSync(__dirname+se,JSON.stringify(i,null,2)),C.writeFileSync(__dirname+oe,c)}else N("No locales provided");if(t){let i=t.map(({sys:c,name:y,fields:p})=>({contentTypeId:c.id,name:y,fields:p.filter(f=>!f.disabled).reduce((f,{id:o,type:n,linkType:s,required:l,items:a,validations:T})=>({...f,[o]:{type:n==="Symbol"?"string":n,required:l,linkType:s,validationTypes:A(t,o)!==null?!1:T?.[0]?.linkContentType,arrayTypeItems:(n==="Array"&&a.validations?.[0]?.linkContentType)??[a?.type==="Symbol"?"string":a?.type]}}),{})}));C.writeFileSync(__dirname+R,JSON.stringify(i,null,2))}else N("No content types provided")}function v(){let e=JSON.parse(C.readFileSync(__dirname+R).toString());if(e){let t=`// WARNING! Bear in mind this file is automatically generated.
 // DO NOT make any changes manually

`,r=`import { EntryFields, Sys } from 'contentful';
                     import RichText = EntryFields.RichText;
                     import Link = EntryFields.Link;
                     import { CTLocales } from '@api/contentful/locales';
                     
`,i=`
          export type CTEntryOfTypes<E> = CTEntry<E, CContentTypes<CTLocales>[CContentTypesKeys]>;
          export type CTEntry<E, F> = Omit<E, 'fields'> & { metadata: Record<string, unknown>, fields: F, sys: Sys };

    `,c=`
      export type Asset<L extends CTLocales> =  {
        title: Record<L, string>
        description: Record<L, string>
        file: Record<L, {
          url: string,
          details: {
            size: number,
            image: {
              width: number,
              height: number
            }
          },
          fileName: string,
          contentType: string
        }>
      }
    `,y=`${e.reduce((o,n)=>{let{name:s,fields:l}=n,a=ie(s,l);return o+a},"")}`,p=__dirname+re,f=I.format(t+r+c+i+ce(e)+y,{filepath:p});C.writeFileSync(p,f)}else N("No model types provided")}var h=m(require("fs"),1),D=m(require("prettier"),1),x="/api/contentful",pe=`${x}/contentEntries.json`,le=`${x}/contentTypes.json`,ae=`${x}/slugs.ts`;function K(){let e=JSON.parse(h.readFileSync(__dirname+x+"/locales.json").toString()),t=JSON.parse(h.readFileSync(__dirname+pe).toString()),r=JSON.parse(h.readFileSync(__dirname+le).toString()),i=e[0].code,c=`
        export type CTSlugs = ${t.reduce((n,s,l)=>s.fields.slug?n+`${l>0?" | ":""}'${s.fields.slug?.[i]??s.fields.title?.[i]?.toLowerCase()?.replaceAll(/\'/gi,"")?.split(" ").join("-")}'`:n,"")}
    `,y=`${r.reduce((n,s)=>{let l=t.filter(a=>a.sys?.contentType?.sys?.id===s.contentTypeId);return n+`

export type CT${s.name.replace(/\s/gi,"")}Slug = ${l.length===0?"''":l.reduce((a,T,d)=>{try{return a+`${d>0?" | ":""}'${T.fields.slug[i]}'`}catch(u){console.error("ERR WHILE SLUG TYPES GEN:",u,{entry:JSON.stringify(T,null,2),idx:d})}},"")};`},"")}`,p=()=>{let n=t.filter(s=>s.sys?.type==="Asset");return`

export type CTAssetSlug = ${n.length===0?"''":`${n.reduce((s,l,a)=>s+`${a>0?" | ":""}"${l.fields.title[i]}"`,"")}`};`},f=__dirname+ae,o=D.format(c+y+p(),{filepath:f});h.writeFileSync(f,o)}var g=m(require("fs"),1),M=m(require("prettier"),1),_=e=>e.name.replace(/\s/gi,"");function F(e){let t=JSON.parse(g.readFileSync(__dirname+e.contentTypesJSONPath).toString()),r=JSON.parse(g.readFileSync(__dirname+e.contentEntriesJSONPath).toString()),i=o=>r.filter(n=>n.sys?.contentType?.sys?.id===o.contentTypeId).length>0,c=`
    import { CContentTypes, CContentTypesKeys, CTEntryOfTypes, CTEntry, Asset } from '@api/contentful/contentTypes';
    import { CTLocales } from '@api/contentful/locales';
    import locales from '@api/contentful/locales.json';
    import entries from '@api/contentful/contentEntries.json';
    import { CTSlugs, CTAssetSlug, ${t.reduce((o,n,s)=>i(n)?o+`CT${_(n)}Slug${s<t.length-1?", ":""}`:o,"")} } from '@api/contentful/slugs';
  `,y=`
    export const CTGetLocales = () => locales as Array<Omit<typeof locales[0], 'code'> & { code: CTLocales }>;

    export const CTGetEntryBySlug = <E extends CTEntryOfTypes<typeof entries[0]>, C extends CContentTypesKeys>(
      slug: CTSlugs,
      locale: CTLocales,
      contentType?: C,
    ) =>
      (entries as (E & CTEntry<E, CContentTypes<CTLocales>[C]>)[]).find((entry) => {
        return (contentType ? entry?.sys?.contentType?.sys?.id === contentType : true) && entry?.fields?.slug?.[locale] === slug;
      });
      
    export const CTGetAsset = (slug: CTAssetSlug, locale: CTLocales) =>
      (entries as unknown as CTEntry<{}, Asset<CTLocales>>[]).find((entry) => entry?.fields?.title?.[locale] === slug);
      
    const CTGetAllEntriesByContentType = <E extends CTEntryOfTypes<typeof entries[0]>, C extends CContentTypesKeys>(
      contentType: C,
    ) =>
      (entries as (E & CTEntry<E, CContentTypes<CTLocales>[C]>)[]).filter(
        (entry) => entry?.sys?.contentType?.sys?.id === contentType,
      );
    
    export type IGetEntries = ReturnType<typeof CTGetEntries>;
    ${t.reduce((o,n)=>{let s=_(n);return i(n)?o+`export type IGet${s}s = ReturnType<IGetEntries['get${s}s']>; 
`:o},"")}
   
      
    export const CTGetEntries = (locale?: CTLocales) => ({
      ${t.reduce((o,n)=>{let s=n.contentTypeId,l=_(n);return i(n)?o+`get${l}s: (${s}s?: CT${l}Slug[]) => !${s}s
      ? CTGetAllEntriesByContentType('${s}')
      : ${s}s?.map((${s}) => CTGetEntryBySlug(${s}, locale ?? null, '${s}')), 
`:o},"")}
    });
  `,p=__dirname+e.apiTSPath,f=M.format(c+y,{filepath:p});g.writeFileSync(p,f)}function ye(e){return this.options={},this.options.basePath=e.basePath??"/api/contentful",this.options.contentFile=e.contentFile??"contentful-export.json",this.options.exportDir=e.exportDir??`${this.options.basePath}/data`,this.options.errorLogFile=e.errorLogFile??"error.log",this.options.downloadAssets=e.downloadAssets??!0,this.options.contentEntriesJSONPath=e.contentEntriesJSONPath??`${this.options.basePath}/contentEntries.json`,this.options.contentTypesJSONPath=e.contentTypesJSONPath??`${this.options.basePath}/contentTypes.json`,this.options.apiTSPath=e.apiTSPath??`${this.options.basePath}/api.ts`,Object.assign(this.options,e),this.options}async function U(e){let t=ye(e);await j(t),B(),v(),w(),K(),F(t)}
//# sourceMappingURL=cjs.js.map
