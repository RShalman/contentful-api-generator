{
  "version": 3,
  "sources": ["../src/generators/import-contentful-data.ts", "../src/generators/create-models-and-types.ts", "../src/utils/commons.ts", "../src/generators/create-entries.ts", "../src/generators/create-slugs-types.ts", "../src/generators/create-api.ts", "../src/generators/index.ts"],
  "sourcesContent": ["import contentfulExport from \"contentful-export\";\n\nexport async function fetchContentfulSpaceData(options) {\n  await contentfulExport(options);\n}\n\n//TODO: make dynamic paths\n// export function moveAssetsToPublicFolder() {\n//   const publicContentfulImagesPath =\n//     __dirname + \"/public/contentful/images.ctfassets.net\";\n//   const publicContentfulAssetsPath =\n//     __dirname + \"/public/contentful/assets.ctfassets.net\";\n//   const publicContentfulADownloadsPath =\n//     __dirname + \"/public/contentful/downloads.ctfassets.net\";\n//   const assetsPaths = [\n//     { name: \"images\", path: publicContentfulImagesPath },\n//     {\n//       name: \"assets\",\n//       path: publicContentfulAssetsPath,\n//     },\n//     { name: \"downloads\", path: publicContentfulADownloadsPath },\n//   ];\n//   const isPublicContentfulExists = (path) => fs.existsSync(path);\n//   const makeDir = (path) => {\n//     console.log(path);\n//     fs.mkdirSync(path, { recursive: true });\n//   };\n//   const removeDir = (path) => fs.rmSync(path, { recursive: true, force: true });\n//\n//   assetsPaths.forEach((asset) => {\n//     if (!isPublicContentfulExists) {\n//       makeDir(asset.path);\n//     } else {\n//       removeDir(asset.path);\n//       makeDir(asset.path);\n//     }\n//\n//     //TODO: make dynamic path\n//     fs.rename(\n//       __dirname + `/api/contentful/data/${asset.name}.ctfassets.net`,\n//       asset.path,\n//       (err) => {\n//         if (err) {\n//           console.error(`${capitalize(asset.name)}: ${err}`);\n//         } else {\n//           console.log(\n//             \"\\x1b[32m\",\n//             `SUCCESS! ${capitalize(\n//               asset.name\n//             )} moved to public/contentful folder!`\n//           );\n//         }\n//       }\n//     );\n//   });\n// }\n", "import * as fs from \"fs\";\nimport * as prettier from \"prettier\";\nimport { capitalize } from \"../utils/commons.js\";\nimport { findById } from \"./create-entries.js\";\n\nconst basePath = \"/api/contentful\";\nconst exportFilePath = `${basePath}/data/contentful-export.json`;\nconst typesModelPath = `${basePath}/contentTypes.json`;\nconst localesModelPath = `${basePath}/locales.json`;\nconst localesTSPath = `${basePath}/locales.ts`;\nconst typesTSPath = `${basePath}/contentTypes.ts`;\n\nconst onError = (err) => {\n  throw new Error(`Seems like file is empty or doesnt exist: ${err}`);\n};\n\nfunction typeAdapter(fieldName, type, field) {\n  const arrOfItems = field.arrayTypeItems\n    ? field?.arrayTypeItems?.reduce(\n        (acc, cur, i, arr) =>\n          acc +\n          (cur === \"string\"\n            ? cur\n            : `CContentTypes<L>['${cur}']${\n                i !== arr.length - 1 ? \" | \" : \"\"\n              }\\n`),\n        \"\"\n      )\n    : false;\n\n  const arrOfValidationTypes = field.validationTypes\n    ? field?.validationTypes?.reduce(\n        (acc, cur, i, arr) =>\n          acc +\n          (cur === \"string\"\n            ? cur\n            : `CContentTypes<L>['${cur}']${\n                i !== arr.length - 1 ? \" | \" : \"\"\n              }\\n`),\n        \"\"\n      )\n    : false;\n\n  return (\n    {\n      Array: arrOfItems ? `Array<${arrOfItems}>` : type,\n      Link:\n        field.linkType === \"Entry\"\n          ? arrOfValidationTypes || `CT${capitalize(fieldName)}<L>`\n          : `${field.linkType}<L>`,\n      Integer: \"number\",\n    }[type] ?? type\n  );\n}\n\nfunction typeTemplate(name, fields) {\n  return `\n      export type CT${name.split(\" \").join(\"\")}<L extends CTLocales> = {\n        ${Object.keys(fields).reduce((typeAcc, typeCur) => {\n          const field = fields[typeCur];\n\n          const withAsset =\n            field.linkType === \"Asset\"\n              ? typeAdapter(typeCur, field.type, field)\n              : `Record<L, ${typeAdapter(typeCur, field.type, field)}>`;\n\n          return (\n            typeAcc + `${typeCur}${field.required ? \"\" : \"?\"}: ${withAsset};`\n          );\n        }, \"\")}\n          }\n\n          \\n\n          `;\n}\n\nfunction typesReferenceType(typesModel) {\n  return `\n      export type CContentTypesKeys = keyof CContentTypes<CTLocales>\\n\n      export type CContentTypes<L extends CTLocales> = {${typesModel.reduce(\n        (acc, cur) =>\n          acc + `${cur.contentTypeId}: CT${cur.name.split(\" \").join(\"\")}<L>;`,\n        ``\n      )}}\n      \n      \\n\n    `;\n}\n\nexport function createTypesModels() {\n  const contentfulExportFile = JSON.parse(\n    fs.readFileSync(__dirname + exportFilePath).toString()\n  );\n  const { contentTypes, locales } = contentfulExportFile ?? {};\n\n  if (locales) {\n    const procLocales = locales.map(({ name, code }) => ({ name, code }));\n    const localesToTS = `export type CTLocales = ${procLocales.reduce(\n      (acc, cur, idx) =>\n        acc + (idx === 0 ? `'${cur.code}'` : ` | '${cur.code}'`),\n      \"\"\n    )}`;\n\n    fs.writeFileSync(\n      __dirname + localesModelPath,\n      JSON.stringify(procLocales, null, 2)\n    );\n    fs.writeFileSync(__dirname + localesTSPath, localesToTS);\n  } else {\n    onError(\"No locales provided\");\n  }\n\n  if (contentTypes) {\n    const procContentTypes = contentTypes.map(({ sys, name, fields }) => ({\n      contentTypeId: sys.id,\n      name,\n      fields: fields\n        .filter((f) => !f.disabled)\n        .reduce((acc, { id, type, linkType, required, items, validations }) => {\n          return {\n            ...acc,\n            [id]: {\n              type: type === \"Symbol\" ? \"string\" : type,\n              required,\n              linkType,\n              validationTypes:\n                findById(contentTypes, id) !== null\n                  ? false\n                  : validations?.[0]?.linkContentType,\n              arrayTypeItems: (type === \"Array\" &&\n                items.validations?.[0]?.linkContentType) ?? [\n                items?.type === \"Symbol\" ? \"string\" : items?.type,\n              ],\n            },\n          };\n        }, {}),\n    }));\n\n    fs.writeFileSync(\n      __dirname + typesModelPath,\n      JSON.stringify(procContentTypes, null, 2)\n    );\n  } else {\n    onError(\"No content types provided\");\n  }\n}\n\nexport function createTypesTS() {\n  const typesModel = JSON.parse(\n    fs.readFileSync(__dirname + typesModelPath).toString()\n  );\n\n  if (typesModel) {\n    const notification = `// WARNING! Bear in mind this file is automatically generated.\\n // DO NOT make any changes manually\\n\\n`;\n    const imports = `import { EntryFields, Sys } from 'contentful';\n                     import RichText = EntryFields.RichText;\n                     import Link = EntryFields.Link;\n                     import { CTLocales } from '@api/contentful/locales';\n                     \\n`;\n\n    const entryType = `\n          export type CTEntryOfTypes<E> = CTEntry<E, CContentTypes<CTLocales>[CContentTypesKeys]>;\n          export type CTEntry<E, F> = Omit<E, 'fields'> & { metadata: Record<string, unknown>, fields: F, sys: Sys };\\n\n    `;\n\n    const assetType = `\n      export type Asset<L extends CTLocales> =  {\n        title: Record<L, string>\n        description: Record<L, string>\n        file: Record<L, {\n          url: string,\n          details: {\n            size: number,\n            image: {\n              width: number,\n              height: number\n            }\n          },\n          fileName: string,\n          contentType: string\n        }>\n      }\n    `;\n\n    const contentTypes = `${typesModel.reduce((acc, typeObj) => {\n      const { name, fields } = typeObj;\n\n      const type = typeTemplate(name, fields);\n      return acc + type;\n    }, \"\")}`;\n\n    const filepath = __dirname + typesTSPath;\n    const validContent = prettier.format(\n      notification +\n        imports +\n        assetType +\n        entryType +\n        typesReferenceType(typesModel) +\n        contentTypes,\n      { filepath }\n    );\n    fs.writeFileSync(filepath, validContent);\n  } else {\n    onError(\"No model types provided\");\n  }\n}\n", "export function capitalize(s) {\n  return s && s[0].toUpperCase() + s.slice(1);\n}\n\nexport function isArray(obj) {\n  return Array.isArray(obj);\n}\n\nexport function isObject(obj) {\n  typeof obj === \"object\" && !isArray(obj) && obj !== null;\n}\n\nexport function isArrOrObj(obj) {\n  return isArray(obj) || isObject(obj);\n}\n", "import * as fs from \"fs\";\nimport {isArray, isArrOrObj} from \"../utils/commons\";\n\n//TODO: change to dynamic path\nconst basePath = \"/api/contentful\";\nconst exportFilePath = `${basePath}/data/contentful-export.json`;\nconst contentEntriesPath = `${basePath}/contentEntries.json`;\n\nexport const findById = (arr, id) => arr.find((el) => el.sys.id === id) ?? null;\n\nexport function createEntries() {\n  const { entries, assets } =\n    JSON.parse(fs.readFileSync(__dirname + exportFilePath).toString()) ?? {};\n  const locales = JSON.parse(\n    fs.readFileSync(__dirname + basePath + \"/locales.json\").toString()\n  );\n  const procAssets = assets\n    ? JSON.parse(JSON.stringify(assets).replaceAll(/\\/\\/images/gi, \"images\"))\n    : null;\n  const comparableEntries = [...entries, ...procAssets];\n\n  const findEntryById = (id) => findById(comparableEntries, id);\n\n  const findDeepEntriesRecursively = (id, language) => {\n    const entry = findEntryById(id);\n\n    // Entry may be a DRAFT\n    if (!entry) return null;\n\n    const entriesKeys = Object.keys(entry.fields);\n    return {\n      ...entry,\n      fields: entriesKeys.reduce((entriesAcc, key) => {\n        const fieldItem = entry.fields[key];\n\n        return {\n          ...entriesAcc,\n          [key]:\n            !fieldItem[language].sys && !isArray(fieldItem[language])\n              ? fieldItem\n              : isArray(fieldItem[language])\n              ? fieldItem[language].map((item) =>\n                  item.sys\n                    ? findDeepEntriesRecursively(item.sys.id, language)?.fields\n                    : item\n                )\n              : fieldItem[language].sys\n              ? findDeepEntriesRecursively(fieldItem[language].sys.id, language)\n                  .fields\n              : fieldItem[language],\n        };\n      }, {}),\n    };\n  };\n\n  const fieldEntryLinkToExactData = (\n    fieldItem,\n    withFields = false,\n    language\n  ) => {\n    let fieldData = fieldItem;\n\n    if (isArrOrObj(fieldItem)) {\n      if (isArray(fieldItem)) {\n        fieldData = fieldItem\n          .map((item) => {\n            const { sys } = item;\n            const entry = sys\n              ? findDeepEntriesRecursively(sys.id, language)\n              : item;\n\n            //May be a DRAFT\n            if (!entry) return null;\n\n            return withFields && sys ? entry.fields : entry;\n          })\n          .filter(Boolean);\n      } else {\n        if (fieldItem.sys) {\n          const entry = findDeepEntriesRecursively(fieldItem.sys.id, language);\n\n          //May be a DRAFT\n          if (!entry) {\n            fieldData = null;\n          } else {\n            fieldData = withFields ? entry.fields : entry;\n          }\n        }\n      }\n    }\n\n    return fieldData;\n  };\n\n  if (comparableEntries) {\n    const procEntries = comparableEntries.map(({ fields, ...entry }) => {\n      const procFields = Object.keys(fields).reduce((acc, field) => {\n        return {\n          ...acc,\n          [field]: locales.reduce((localesAcc, { code }) => {\n            const fieldItem = fields[field][code];\n            return {\n              ...localesAcc,\n              [code]: fieldEntryLinkToExactData(fieldItem, true, code),\n            };\n          }, {}),\n        };\n      }, {});\n\n      return { ...entry, fields: procFields };\n    });\n\n    fs.writeFileSync(\n      __dirname + contentEntriesPath,\n      JSON.stringify(procEntries, null, 2)\n    );\n  }\n}\n", "import * as fs from \"fs\";\nimport * as prettier from \"prettier\";\n\n//TODO: change to dynamic path\nconst basePath = \"/api/contentful\";\nconst contentEntriesPath = `${basePath}/contentEntries.json`;\nconst contentTypesPath = `${basePath}/contentTypes.json`;\nconst slugsTSPath = `${basePath}/slugs.ts`;\n\nexport function createSlugsTypes() {\n  const locales = JSON.parse(\n    fs.readFileSync(__dirname + basePath + \"/locales.json\").toString()\n  );\n  const entries = JSON.parse(\n    fs.readFileSync(__dirname + contentEntriesPath).toString()\n  );\n  const types = JSON.parse(\n    fs.readFileSync(__dirname + contentTypesPath).toString()\n  );\n  const defaultLocale = locales[0].code;\n\n  const slugsTypes = `\n        export type CTSlugs = ${entries.reduce((acc, cur, idx) => {\n          return !cur.fields.slug\n            ? acc\n            : acc +\n                `${idx > 0 ? \" | \" : \"\"}'${\n                  cur.fields.slug?.[defaultLocale] ??\n                  cur.fields.title?.[defaultLocale]\n                    ?.toLowerCase()\n                    ?.replaceAll(/\\'/gi, \"\")\n                    ?.split(\" \")\n                    .join(\"-\")\n                }'`;\n        }, \"\")}\n    `;\n\n  const slugsByTypes = `${types.reduce((typesAcc, type) => {\n    const filteredEntries = entries.filter(\n      (entry) => entry.sys?.contentType?.sys?.id === type.contentTypeId\n    );\n    return (\n      typesAcc +\n      `\\n\\nexport type CT${type.name.replace(/\\s/gi, \"\")}Slug = ${\n        filteredEntries.length === 0\n          ? `''`\n          : filteredEntries.reduce((entriesAcc, entry, idx) => {\n              try {\n                return (\n                  entriesAcc +\n                  `${idx > 0 ? \" | \" : \"\"}'${entry.fields.slug[defaultLocale]}'`\n                );\n              } catch (e) {\n                console.error(\"ERR WHILE SLUG TYPES GEN:\", e, {\n                  entry: JSON.stringify(entry, null, 2),\n                  idx,\n                });\n              }\n            }, \"\")\n      };`\n    );\n  }, ``)}`;\n\n  const slugsForAssets = () => {\n    const assetsEntries = entries.filter(\n      (entry) => entry.sys?.type === \"Asset\"\n    );\n\n    return `\\n\\nexport type CTAssetSlug = ${\n      assetsEntries.length === 0\n        ? `''`\n        : `${assetsEntries.reduce((assetsAcc, asset, idx) => {\n            return (\n              assetsAcc +\n              `${idx > 0 ? \" | \" : \"\"}\"${asset.fields.title[defaultLocale]}\"`\n            );\n          }, ``)}`\n    };`;\n  };\n\n  const filepath = __dirname + slugsTSPath;\n  const prettified = prettier.format(\n    slugsTypes + slugsByTypes + slugsForAssets(),\n    { filepath }\n  );\n\n  fs.writeFileSync(filepath, prettified);\n}\n", "import * as fs from \"fs\";\nimport * as prettier from \"prettier\";\nimport { CAGOptions } from \"../../types\";\n\nconst UpperCasedTypeName = (type) => type.name.replace(/\\s/gi, \"\");\n\nexport default function createApi(options: CAGOptions) {\n  const types = JSON.parse(\n    fs.readFileSync(__dirname + options.contentTypesJSONPath).toString()\n  );\n  const entries = JSON.parse(\n    fs.readFileSync(__dirname + options.contentEntriesJSONPath).toString()\n  );\n\n  const hasEntriesOfType = (type) =>\n    entries.filter(\n      (entry) => entry.sys?.contentType?.sys?.id === type.contentTypeId\n    ).length > 0;\n\n  //TODO: add dynamic routes to imports\n  const imports = `\n    import { CContentTypes, CContentTypesKeys, CTEntryOfTypes, CTEntry, Asset } from '@api/contentful/contentTypes';\n    import { CTLocales } from '@api/contentful/locales';\n    import locales from '@api/contentful/locales.json';\n    import entries from '@api/contentful/contentEntries.json';\n    import { CTSlugs, CTAssetSlug, ${types.reduce(\n      (typesAcc, type, idx) =>\n        !hasEntriesOfType(type)\n          ? typesAcc\n          : typesAcc +\n            `CT${UpperCasedTypeName(type)}Slug${\n              idx < types.length - 1 ? \", \" : \"\"\n            }`,\n      \"\"\n    )} } from '@api/contentful/slugs';\n  `;\n\n  const apiEndpoints = `\n    export const CTGetLocales = () => locales as Array<Omit<typeof locales[0], 'code'> & { code: CTLocales }>;\n\n    export const CTGetEntryBySlug = <E extends CTEntryOfTypes<typeof entries[0]>, C extends CContentTypesKeys>(\n      slug: CTSlugs,\n      locale: CTLocales,\n      contentType?: C,\n    ) =>\n      (entries as (E & CTEntry<E, CContentTypes<CTLocales>[C]>)[]).find((entry) => {\n        return (contentType ? entry?.sys?.contentType?.sys?.id === contentType : true) && entry?.fields?.slug?.[locale] === slug;\n      });\n      \n    export const CTGetAsset = (slug: CTAssetSlug, locale: CTLocales) =>\n      (entries as unknown as CTEntry<{}, Asset<CTLocales>>[]).find((entry) => entry?.fields?.title?.[locale] === slug);\n      \n    const CTGetAllEntriesByContentType = <E extends CTEntryOfTypes<typeof entries[0]>, C extends CContentTypesKeys>(\n      contentType: C,\n    ) =>\n      (entries as (E & CTEntry<E, CContentTypes<CTLocales>[C]>)[]).filter(\n        (entry) => entry?.sys?.contentType?.sys?.id === contentType,\n      );\n    \n    export type IGetEntries = ReturnType<typeof CTGetEntries>;\n    ${types.reduce((typesAcc, type) => {\n      const UCasedName = UpperCasedTypeName(type);\n      return !hasEntriesOfType(type)\n        ? typesAcc\n        : typesAcc +\n            `export type IGet${UCasedName}s = ReturnType<IGetEntries['get${UCasedName}s']>; \\n`;\n    }, \"\")}\n   \n      \n    export const CTGetEntries = (locale?: CTLocales) => ({\n      ${types.reduce((typesAcc, type) => {\n        const typeName = type.contentTypeId;\n        const UCasedName = UpperCasedTypeName(type);\n        return !hasEntriesOfType(type)\n          ? typesAcc\n          : typesAcc +\n              `get${UCasedName}s: (${typeName}s?: CT${UCasedName}Slug[]) => !${typeName}s\n      ? CTGetAllEntriesByContentType('${typeName}')\n      : ${typeName}s?.map((${typeName}) => CTGetEntryBySlug(${typeName}, locale ?? null, '${typeName}')), \\n`;\n      }, \"\")}\n    });\n  `;\n\n  const filepath = __dirname + options.apiTSPath;\n  const prettified = prettier.format(imports + apiEndpoints, { filepath });\n\n  fs.writeFileSync(filepath, prettified);\n}\n", "import { fetchContentfulSpaceData } from \"./import-contentful-data\";\nimport { createTypesModels, createTypesTS } from \"./create-models-and-types\";\nimport { createEntries } from \"./create-entries\";\nimport { createSlugsTypes } from \"./create-slugs-types\";\nimport createApi from \"./create-api\";\nimport { CAGOptions } from \"../../types\";\n\nfunction CreateOptions(args: CAGOptions): CAGOptions {\n  this.options = {} as CAGOptions;\n  this.options.basePath = args.basePath ?? \"/api/contentful\";\n  this.options.contentFile = args.contentFile ?? \"contentful-export.json\";\n  this.options.exportDir = args.exportDir ?? `${this.options.basePath}/data`;\n  this.options.errorLogFile = args.errorLogFile ?? \"error.log\";\n  this.options.downloadAssets = args.downloadAssets ?? true;\n  this.options.contentEntriesJSONPath =\n    args.contentEntriesJSONPath ??\n    `${this.options.basePath}/contentEntries.json`;\n  this.options.contentTypesJSONPath =\n    args.contentTypesJSONPath ?? `${this.options.basePath}/contentTypes.json`;\n  this.options.apiTSPath = args.apiTSPath ?? `${this.options.basePath}/api.ts`;\n\n  Object.assign(this.options, args);\n\n  return this.options;\n}\n\nexport default async function generateContentfulApi(args: CAGOptions) {\n  const options = CreateOptions(args);\n\n  await fetchContentfulSpaceData(options);\n  // if (options.downloadAssets) moveAssetsToPublicFolder();\n\n  // Entrypoint for all generators in a certain order\n  // Import made separately\n\n  createTypesModels();\n  createTypesTS();\n  createEntries();\n  createSlugsTypes();\n  createApi(options);\n}\n"],
  "mappings": "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",
  "names": ["contentfulExport", "fetchContentfulSpaceData", "options", "fs", "prettier", "capitalize", "s", "isArray", "obj", "isObject", "isArrOrObj", "fs", "basePath", "exportFilePath", "contentEntriesPath", "findById", "arr", "id", "el", "createEntries", "entries", "assets", "locales", "procAssets", "comparableEntries", "findEntryById", "findDeepEntriesRecursively", "language", "entry", "entriesKeys", "entriesAcc", "key", "fieldItem", "isArray", "item", "fieldEntryLinkToExactData", "withFields", "fieldData", "isArrOrObj", "sys", "procEntries", "fields", "procFields", "acc", "field", "localesAcc", "code", "basePath", "exportFilePath", "typesModelPath", "localesModelPath", "localesTSPath", "typesTSPath", "onError", "err", "typeAdapter", "fieldName", "type", "field", "arrOfItems", "acc", "cur", "i", "arr", "arrOfValidationTypes", "capitalize", "typeTemplate", "name", "fields", "typeAcc", "typeCur", "withAsset", "typesReferenceType", "typesModel", "createTypesModels", "contentfulExportFile", "contentTypes", "locales", "procLocales", "code", "localesToTS", "idx", "procContentTypes", "sys", "id", "linkType", "required", "items", "validations", "findById", "createTypesTS", "notification", "imports", "entryType", "assetType", "typeObj", "filepath", "validContent", "fs", "prettier", "basePath", "contentEntriesPath", "contentTypesPath", "slugsTSPath", "createSlugsTypes", "locales", "entries", "types", "defaultLocale", "slugsTypes", "acc", "cur", "idx", "slugsByTypes", "typesAcc", "type", "filteredEntries", "entry", "entriesAcc", "e", "slugsForAssets", "assetsEntries", "assetsAcc", "asset", "filepath", "prettified", "fs", "prettier", "UpperCasedTypeName", "type", "createApi", "options", "types", "entries", "hasEntriesOfType", "entry", "imports", "typesAcc", "idx", "apiEndpoints", "UCasedName", "typeName", "filepath", "prettified", "CreateOptions", "args", "generateContentfulApi", "options", "fetchContentfulSpaceData", "createTypesModels", "createTypesTS", "createEntries", "createSlugsTypes", "createApi"]
}
